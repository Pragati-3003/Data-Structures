<!-- https://www.naukri.com/code360/problems/implement-trie_631356?topList=love-babbar-dsa-sheet-problems&leftPanelTab=0&utm_source=youtube&utm_medium=affiliate&utm_campaign=Lovebabbar&nps=true -->



/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */

class TrieNode {
    public:
  // root data
  char data;
  // nodes of the root
  TrieNode *children[26];
  // to check the last letter of the word
  bool isTerminal;

  TrieNode(char ch) {
    data = ch;
    for (int i = 0; i < 26; i++) {
      children[i] = NULL;
  
    }
        isTerminal = false;
  }

} ;

class Trie {
public:
TrieNode * root;
  /** Initialize your data structure here. */
  Trie() {
      // initialize root with the null 
      root=new TrieNode('\0');
  }

  //Util function for the insertion
  void insertUtil(TrieNode*root,string word){
      //base case 
      if(word.length()==0){
          root->isTerminal =true;
          return;
      }

      int index = word[0]-'a';
      TrieNode *child;
      if(root->children[index]!=NULL){
          child=root->children[index];
      }else {
          child =new TrieNode(word[0]);
          root->children[index]=child;
      }
      //recursion
      insertUtil(child, word.substr(1));
  }
  /** Inserts a word into the trie. */
  void insert(string word) {
      insertUtil(root,word);
  }


  bool SearchUtil(TrieNode*root,string word){
      //base case 
      if(word.length()==0){
          return root->isTerminal;
      }

      int index = word[0]-'a';
      TrieNode *child;
      if(root->children[index]!=NULL){
          child=root->children[index];
      }else {
            return false;
      }
      //recursion
     return  SearchUtil(child, word.substr(1));
  }
  /** Returns if the word is in the trie. */
  bool search(string word) {
      return  SearchUtil(root,word);
  }

  /** Returns if there is any word in the trie that starts with the given
   * prefix. */

     bool prefixUtil(TrieNode*root,string word){
      //base case 
      if(word.length()==0){
          return true;
      }

      int index = word[0]-'a';
      TrieNode *child;
      if(root->children[index]!=NULL){
          child=root->children[index];
      }else {
            return false;
      }
      //recursion
     return  prefixUtil(child, word.substr(1));
  }
  bool startsWith(string prefix) {
    return  prefixUtil(root,prefix);
  }
};
