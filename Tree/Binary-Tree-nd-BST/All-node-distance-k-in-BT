<!-- https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/description/ -->


class Solution {
public:

    void findParent(TreeNode* root, unordered_map<TreeNode*, TreeNode*> &parent_pointer, TreeNode* target){
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();
            if(node->left){
                parent_pointer[node->left] = node;
                q.push(node->left);
            }
            if(node->right){
                parent_pointer[node->right] = node;
                q.push(node->right);
            }
        }
    }

    void findNodes(unordered_map<TreeNode*, TreeNode*> &parent_pointer, TreeNode* target, vector<int> &ans, int k){
        queue<TreeNode*> q;
        q.push(target);
        int dist = 0;
        unordered_map<TreeNode*, bool> visited;
        visited[target] = true;
        while(!q.empty()){
            int size = q.size();
            if(dist++ == k) break;
            for(int i=0;i<size;i++){
                TreeNode* node = q.front();
                q.pop();
                if(node->left and !visited[node->left]){
                    q.push(node->left);
                    visited[node->left] = true;
                }
                if(node->right and !visited[node->right]){
                    q.push(node->right);
                    visited[node->right] = true;
                }
                if(parent_pointer[node] and !visited[parent_pointer[node]]){
                    q.push(parent_pointer[node]);
                    visited[parent_pointer[node]] = true;
                }
            }
        }
        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();
            ans.push_back(node->val);
        }
    }

    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*, TreeNode*> parent_pointer;
        vector<int> ans;
        findParent(root, parent_pointer, target);
        findNodes(parent_pointer, target, ans, k);
        return ans;    
    }
};