https://leetcode.com/problems/balanced-binary-tree/description/


Brute Force :-

class Solution {
      // Condition - Take & of them
    // 1 - left subtree balanced
    // 2 - right subtree balanced
    // 3 - L.H - R.H <= 1

    // BC = when root is NULL return true
public:
    int height(TreeNode* root){
    if(root==NULL){return 0;}
    return 1+max(height(root->left),height(root->right));
}

bool isBalanced(TreeNode* root) {
    if(root==NULL){return true;}
    if (abs(height(root->left)-height(root->right))>1){return false;}
    return isBalanced(root->left) && isBalanced(root->right);
}
};



Optimal Solution:- 

class Solution {
public:
 

pair<bool,int> helper(TreeNode* root){
    if(root==NULL)
    {
        pair<bool,int>p=make_pair(true,0);
        return p;
    }
pair<bool,int> left= helper(root->left);
pair<bool,int> right = helper(root->right);

bool leftans = left.first;
bool rightans= right.first;
bool diff = abs(left.second-right.second)<=1;
pair<bool,int>ans;

ans.second= max(left.second,right.second)+1;
if(leftans&& rightans&&diff)
ans.first=true;
else 
ans.second=false;

return ans;


}
bool isBalanced(TreeNode* root) {
   return helper(root).first;
}  
};