<!-- https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/description/ -->


Optimal Solution :- 

class Solution {
    TreeNode* buildTree(vector<int>& preorder, vector<int>& postorder, unordered_map<int, int>& postIndexMap,
                        int preStart, int preEnd, int postStart, int postEnd) {
        if (preStart > preEnd || postStart > postEnd) {
            return nullptr;
        }
        
        TreeNode* root = new TreeNode(preorder[preStart]);
        if (preStart == preEnd) return root;
        
        int nextRootVal = preorder[preStart + 1]; // Next root in the preorder
        int postIndex = postIndexMap[nextRootVal]; // Find this root in the postorder

        int leftSize = postIndex - postStart + 1; // Size of the left subtree

        root->left = buildTree(preorder, postorder, postIndexMap, preStart + 1, preStart + leftSize, postStart, postIndex);
        root->right = buildTree(preorder, postorder, postIndexMap, preStart + leftSize + 1, preEnd, postIndex + 1, postEnd - 1);
        return root;
    }
public:
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        unordered_map<int, int> postIndexMap;
        for (int i = 0; i < postorder.size(); ++i) {
            postIndexMap[postorder[i]] = i;
        }
        return buildTree(preorder, postorder, postIndexMap, 0, preorder.size() - 1, 0, postorder.size() - 1);
    }
};


Brute Force:-

class Solution {
public:
    int search(vector<int>& postorder, int start, int end, int num) {
        for (int i = start; i <= end; i++) {
            if (postorder[i] == num) {
                return i;
            }
        }

        return -1;
    }

    int preindex = 0;
    TreeNode* solve(vector<int>& preorder, vector<int>& postorder, int start,
                    int end) {
        if (start > end || preindex >= preorder.size())
            return NULL;

        int num = preorder[preindex];
        preindex++;

        TreeNode* root = new TreeNode(num);

        if (preindex >= preorder.size() || start == end)
            return root;

        int postindex = search(postorder, start, end, preorder[preindex]);

        root->left = solve(preorder, postorder, start, postindex);

        root->right = solve(preorder, postorder, postindex + 1, end - 1);

        return root;
    }
    TreeNode* constructFromPrePost(vector<int>& preorder,
                                   vector<int>& postorder) {
        return solve(preorder, postorder, 0, preorder.size() - 1);
    }
};