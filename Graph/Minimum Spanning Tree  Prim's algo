<!-- https://www.naukri.com/code360/problems/prim-s-mst_1095633?topList=love-babbar-dsa-sheet-problems&leftPanelTab=0&utm_source=youtube&utm_medium=affiliate&utm_campaign=Lovebabbar&leftPanelTabValue=PROBLEM&nps=true -->       


int findMinKey(vector<int> &minEdgeCut, vector<bool> &includedMST, int n)
{
    // Initialize min value.
    int min = INT_MAX, min_index=-1;

    for (int v = 0; v < n; v++)
    {
        if (includedMST[v] == false && minEdgeCut[v] < min)
        {
            min = minEdgeCut[v];
            min_index = v;
        }
    }
    return min_index;
}

vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)
{
    vector<vector<int>> graph(n, vector<int>(n, 0));

    for (int i = 0; i < g.size(); i++)
    {
        graph[g[i].first.first - 1][g[i].first.second - 1] = g[i].second;
        graph[g[i].first.second - 1][g[i].first.first - 1] = g[i].second;
    }

    // Array to store constructed MST.
    vector<int> parent(n);

    // Key values used to pick minimum weight edge in cut.
    vector<int> minEdgeCut(n);

    // To represent set of vertices included in MST.
    vector<bool> includedMST(n);

    // Initialize all keys as INFINITE.
    for (int i = 0; i < n; i++)
    {
        minEdgeCut[i] = INT_MAX;
        includedMST[i] = false;
    }

    // Always include first 1st vertex in MST and Make key 0 so that this vertex is picked as first vertex.
    minEdgeCut[0] = 0;

    // First node is always root of MST.
    parent[0] = -1;

    // The MST will have n vertices.
    for (int count = 0; count < n - 1; count++)
    {
        // Pick the minimum key vertex from the set of vertices not yet included in MST.
        int u = findMinKey(minEdgeCut, includedMST, n);

        // Add the picked vertex to the MST Set.
        includedMST[u] = true;

        // Consider only those vertices which are not yet included in MST.
        for (int v = 0; v < n; v++)
        {
            if (graph[u][v]!=0 && includedMST[v] == false && graph[u][v] < minEdgeCut[v])
            {
                parent[v] = u;
                minEdgeCut[v] = graph[u][v];
            }
        }
    }

    vector<pair<pair<int, int>, int>> result;

    for (int i = 1; i < n; i++)
    {
        result.push_back({{parent[i]+1, i+1}, minEdgeCut[i]});
    }

    return result;
}



