<!-- https://www.naukri.com/code360/problems/detect-cycle-in-a-directed-graph_1062626?leftPanelTab=0&utm_source=youtube&utm_medium=affiliate&utm_campaign=Lovebabbar&leftPanelTabValue=PROBLEM -->

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {

unordered_map<int, list<int>> adj;

for(int i = 0; i < edges.size(); i++){

    int u = edges[i].first - 1;

    int v = edges[i].second  - 1;   // -1 kyonki degree 1 se start hai



    adj[u].push_back(v);

}

vector<int> indegree(n,0);

for(auto i : adj){

    for(auto j : i.second){

      indegree[j]++;

    }

}

queue<int> q;

for(int i = 0; i < n; i++){

    if(indegree[i] == 0){

      q.push(i);

    }

}

int cnt = 0;  
 while(!q.empty()){

    int front = q.front();

    q.pop();

    cnt++;

    for(auto neighbour : adj[front]){

        indegree[neighbour]--;

      if(indegree[neighbour] == 0){

        q.push(neighbour);

      }

    }

}

return cnt != n;

}

