<!-- https://leetcode.com/problems/is-graph-bipartite/description/ -->


class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> color(n, -1); // color 0 or 1, -1 means no color
        for (int i = 0; i < n; i++) {
            if (color[i] == -1) {
                if (DFS(graph, color, i, 0) == false)
                    return false;
            }
        }

        return true;
    }

private:
    bool DFS(vector<vector<int>>& graph, vector<int>& color, int node, int paint) {
        color[node] = paint;

        for (auto& adjNode : graph[node]) {
            if (color[adjNode] == color[node]) {
                return false;
            } else if (color[adjNode] == -1) {
                if (DFS(graph, color, adjNode, !paint) == false)
                    return false;
            }
        }

        return true;
    }
};