<!-- https://www.naukri.com/code360/problems/cycle-detection-in-undirected-graph_1062670?topList=love-babbar-dsa-sheet-problems&leftPanelTab=0&utm_source=youtube&utm_medium=affiliate&utm_campaign=Lovebabbar -->


#include<unordered_map>
#include<queue>
#include<list>


bool bfs(int node, unordered_map<int, bool> &visited,unordered_map<int, list<int>> &adj) {
  unordered_map<int, int> parent;
  queue<int> q;
  q.push(node);
  parent[node] = -1;
  visited[node]=true;
  while (!q.empty()) {
    int frontnode = q.front();
    q.pop();
    for (auto i : adj[frontnode]) {
      if (visited[i] == true && i != parent[frontnode]) {
        return true;
      } else if (!visited[i]) {
        q.push(i);
        visited[i] = true;
        parent[i] = frontnode;
      }
    }
  }
  return false;
}

bool dfs(int node, int parent, unordered_map<int, bool> &visited,
         unordered_map<int, list<int>> &adj) {

           visited[node]=true;

           for(auto i:adj[node]){
             if(!visited[i]){
             bool cycledetected =  dfs(i,node,visited,adj);
             if(cycledetected)
             return true;
             }
             else if(i!=parent) {
               return true;
             }
           }
           return false;
         }

string cycleDetection(vector<vector<int>> &edges, int n, int m) {
  unordered_map<int, list<int>> adj;
  for (int i = 0; i < edges.size(); i++) {
    int u = edges[i][0];
    int v = edges[i][1];
    adj[u].push_back(v);
    adj[v].push_back(u);
  }

  unordered_map<int, bool> visited;
  for (int i = 0; i < n; i++) {
    if (!visited[i]) {
      // bool ans = bfs(i, visited, adj);
       bool ans = dfs(i,-1, visited, adj);
      if (ans)
        return "Yes";
    }
  }
  return "No";
}
