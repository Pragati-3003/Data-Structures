<!-- https://leetcode.com/problems/01-matrix/description/ -->


class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int n=mat.size();
        int m=mat[0].size();
        vector<vector<int>> vis(n,vector<int>(m,0));
        vector<vector<int>> dis(n,vector<int>(m,0));
        //row col step
        queue<pair<pair<int,int>,int>> q;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==0){
                    q.push({{i,j},0});
                    vis[i][j]=1;
                }else{
                    vis[i][j]=0;
                }
            }
        }
        int x[]={0,0,1,-1};
        int y[]={-1,1,0,0};
        while(!q.empty()){
            int row=q.front().first.first;
            int col=q.front().first.second;
            int steps=q.front().second;
            q.pop();
            dis[row][col]=steps;
            for(int i=0;i<4;i++){
                int nx=row+x[i];
                int ny=col+y[i];
                if(nx>=0 && nx<n && ny>=0 && ny<m && vis[nx][ny]==0){
                    vis[nx][ny]=1;
                    q.push({{nx,ny},steps+1});
                }
            }
        }
        return dis;
    }
};