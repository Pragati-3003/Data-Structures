<!-- https://leetcode.com/problems/surrounded-regions/description/ -->



class Solution {
public:
    void dfs(int i, int j, vector<vector<char>>& board,
             vector<vector<int>>& vis) {
        int n = board.size();
        int m = board[0].size();
       
        if (i >= n || i < 0 || j >= m || j < 0 || board[i][j] == 'X' ||  vis[i][j] )
            return;
        vis[i][j] = 1;
        dfs(i, j + 1, board, vis);
        dfs(i, j - 1,board, vis);
        dfs(i + 1, j, board, vis);
        dfs(i - 1, j, board, vis);
    }
    void solve(vector<vector<char>>& board) {
        int n = board.size();
        if (n == 0) return;
        int m = board[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        // traverse top and bottom boundary
        for (int j = 0; j < m; j++) {
            // top
            if (board[0][j] == 'O' && !vis[0][j]) {
                dfs(0, j, board, vis);
            }
            // bottom
            if (board[n - 1][j] == 'O' && !vis[n - 1][j]) {
                dfs(n - 1, j, board, vis);
            }
        }
        // traverse left and right boundary
        for (int j = 0; j < n; j++) {
            // left
            if (board[j][0] == 'O' && !vis[j][0]) {
                dfs(j, 0, board, vis);
            }
            // right
            if (board[j][m - 1] == 'O' && !vis[j][m - 1]) {
                dfs(j, m - 1, board, vis);
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (!vis[i][j] && board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
            }
        }
    }
};