1. Two Sum

<!-- Question Link ==> https://leetcode.com/problems/two-sum/description/ -->


Approach 1 :- Using Map

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map<int, int> mp;
        int n = nums.size();
        for(int i=0;i<n;i++) {
            int current = nums[i];
            int required = target - current;
            if(mp.find(required) != mp.end()) {
                return {i, mp[required]};
            }
            mp[current] = i;
        }
        return {-1, -1};
    }
};


Approach 2 :- 2 Pointer 

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        vector<pair<int,int>>vp;
        for(int i=0; i<n; i++){
            vp.push_back({nums[i],i});
        }
        sort(vp.begin(), vp.end());
        int i = 0, j = n-1;
        while(i < j){
            int sum = vp[i].first + vp[j].first;
            if(sum == target) return {vp[i].second,vp[j].second};
            if(sum < target) i++;
            else j--;
        }
        return {};
    }
};