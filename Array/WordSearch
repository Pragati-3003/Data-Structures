<!-- https://leetcode.com/problems/word-search/description/ -->

class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        if (word.empty())
            return true;
        if (board.empty() || board[0].empty())
            return false;

        int m = board.size();
        int n = board[0].size();

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (dfs(board, word, 0, i, j))
                    return true;
            }
        }

        return false;
    }

private:
    bool dfs(vector<vector<char>>& board, const string& word, int index,
             int row, int col) {
        if (index == word.length())
            return true;
        if (row < 0 || col < 0 || row >= board.size() ||
            col >= board[0].size() || board[row][col] != word[index])
            return false;

        char temp = board[row][col];
        board[row][col] = '#'; // Mark as visited

        bool found = dfs(board, word, index + 1, row + 1, col) ||
                     dfs(board, word, index + 1, row - 1, col) ||
                     dfs(board, word, index + 1, row, col + 1) ||
                     dfs(board, word, index + 1, row, col - 1);

        board[row][col] = temp; // Restore the original character
        return found;
    }
};