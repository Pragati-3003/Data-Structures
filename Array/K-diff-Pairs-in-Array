<!-- https://leetcode.com/problems/k-diff-pairs-in-an-array/description/ -->


Approach 1 : Using Map

class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
      map<int,int>mp;
      for(int n :nums){
        mp[n]++;
      }
      int ans =0;
      for(auto x:mp){
        if(k==0){
            if(x.second>1)
            ans++;
        }
        else if(mp.find(x.first+k)!=mp.end())
        ans++;
      }
      return ans;
    }
};

Approach 2 :- Two Pointer , Space Optimization

class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        sort(nums.begin(),nums.end());
        int ans=0;

        int i = 0,j=1;
        while(j<nums.size()){
            int diff = nums[j]-nums[i];
            if(diff == k){
              ans++;
                ++i;
                ++j;
                while(j<nums.size() and nums[j]==nums[j-1])
                    j++;
            }
            else if(diff > k ){
                i++;
            }
            else{
                j++;
            }
            if(i == j){
                j++;
            }
        }
        return ans;
    }
};